// –ü–æ–≤–Ω–∏–π –∫–æ–¥ js/script.js, –æ–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó WOW Intro
document.addEventListener('DOMContentLoaded', () => {

    // =========================================================================
    // 1. –î–ê–ù–Ü –ü–†–û–§–Ü–õ–Ü–í (–û–ë'–Ñ–ö–¢–ò)
    // –¶—ñ –¥–∞–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö.
    // =========================================================================
    const profiles = [
        // –ñ–Ü–ù–û–ß–Ü –ü–†–û–§–Ü–õ–Ü
        { id: 1, name: '–ê–Ω–Ω–∞', age: 32, city: '–ö–∏—ó–≤', description: '–ê—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä, –ª—é–±–∏—Ç—å —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å—å–∫–∏–π –¥–∏–∑–∞–π–Ω —Ç–∞ –≥—ñ—Ä—Å—å–∫—ñ –ø–æ—Ö–æ–¥–∏.', img: 'placeholder-woman-1.jpg', gender: 'women' },
        { id: 2, name: '–û–ª–µ–Ω–∞', age: 28, city: '–õ—å–≤—ñ–≤', description: '–•—É–¥–æ–∂–Ω–∏—Ü—è, —Ü—ñ–Ω—É—î –∫–ª–∞—Å–∏—á–Ω—É –º—É–∑–∏–∫—É —Ç–∞ —Ç–∏—Ö—ñ –≤–µ—á–æ—Ä–∏.', img: 'placeholder-woman-2.jpg', gender: 'women' },
        { id: 3, name: '–°–æ—Ñ—ñ—è', age: 35, city: '–û–¥–µ—Å–∞', description: '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, —à—É–∫–∞—î –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è —Å–ø—ñ–ª—å–Ω–∏—Ö –ø–æ–¥–æ—Ä–æ–∂–µ–π —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É.', img: 'placeholder-woman-3.jpg', gender: 'women' },
        
        // –ß–û–õ–û–í–Ü–ß–Ü –ü–†–û–§–Ü–õ–Ü
        { id: 4, name: '–î–º–∏—Ç—Ä–æ', age: 37, city: '–ö–∏—ó–≤', description: 'IT-–ø—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å, –∑–∞—Ö–æ–ø–ª—é—î—Ç—å—Å—è –¥–∞–π–≤—ñ–Ω–≥–æ–º —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è–º–∏.', img: 'placeholder-man-1.jpg', gender: 'men' },
        { id: 5, name: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä', age: 30, city: '–î–Ω—ñ–ø—Ä–æ', description: '–§—ñ—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä, —Ü—ñ–Ω—É—î –∑–¥–æ—Ä–æ–≤–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è —Ç–∞ —â–∏—Ä—ñ—Å—Ç—å.', img: 'placeholder-man-2.jpg', gender: 'men' },
        { id: 6, name: '–ú–∞–∫—Å–∏–º', age: 41, city: '–•–∞—Ä–∫—ñ–≤', description: '–ê–¥–≤–æ–∫–∞—Ç, –ª—é–±–∏—Ç—å –¥–∂–∞–∑ —Ç–∞ —Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫—ñ —Ä–æ–∑–º–æ–≤–∏.', img: 'placeholder-man-3.jpg', gender: 'men' }
    ];

    // =========================================================================
    // 2. –ë–ê–ó–û–í–ê –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–Ü–°–¢–¨ (–ê–Ω—ñ–º–∞—Ü—ñ—ó, –ú–µ–Ω—é, –õ—ñ—á–∏–ª—å–Ω–∏–∫, –°–∫—Ä–æ–ª—ñ–Ω–≥)
// === –õ–û–ì–Ü–ö–ê –ê–ù–Ü–ú–ê–¶–Ü–á FADE-IN –ü–†–ò –°–ö–†–û–õ–Ü–ù–ì–£ ===
// –¶—è —Å–µ–∫—Ü—ñ—è —É–ø—Ä–∞–≤–ª—è—î –ø–æ—è–≤–æ—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —ñ–∑ –∫–ª–∞—Å–æ–º .fade-in –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ–Ω–≥—É
const fadeInElements = document.querySelectorAll('.fade-in');
const observerOptions = { root: null, rootMargin: '0px', threshold: 0.2 };

const observer = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('visible');
            observer.unobserve(entry.target);
        }
    });
}, observerOptions);

fadeInElements.forEach(el => observer.observe(el));

// === –õ–û–ì–Ü–ö–ê –ú–û–ë–Ü–õ–¨–ù–û–ì–û –ú–ï–ù–Æ ===
// === –õ–û–ì–Ü–ö–ê –ú–û–ë–Ü–õ–¨–ù–û–ì–û –ú–ï–ù–Æ ===
// –¶—è —Å–µ–∫—Ü—ñ—è —É–ø—Ä–∞–≤–ª—è—î –∫–Ω–æ–ø–∫–æ—é –≥–∞–º–±—É—Ä–≥–µ—Ä–∞ —Ç–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞–Ω–Ω—è–º/–∑–∞–∫—Ä–∏—Ç—Ç—è–º –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é
const navToggle = document.querySelector('.nav-toggle');
const mainNav = document.querySelector('.main-nav');

if (navToggle && mainNav) {
    // === –§–£–ù–ö–¶–Ü–Ø –ó–ê–ö–†–ò–¢–¢–Ø –ú–ï–ù–Æ ===
    const closeMenu = () => {
        mainNav.classList.remove('is-open');
        navToggle.classList.remove('is-open');
        navToggle.setAttribute('aria-expanded', 'false');
        document.removeEventListener('click', closeMenuOnOutsideClick);
    };

    // === –ö–õ–Ü–ö –ü–û –ö–ù–û–ü–¶–Ü –ì–ê–ú–ë–£–†–ì–ï–† ===
    navToggle.addEventListener('click', (e) => {
        e.stopPropagation();
        const isOpen = !mainNav.classList.contains('is-open');
        
        mainNav.classList.toggle('is-open', isOpen);
        navToggle.classList.toggle('is-open', isOpen);
        navToggle.setAttribute('aria-expanded', isOpen);

        if (isOpen) {
            document.addEventListener('click', closeMenuOnOutsideClick);
        } else {
            closeMenu();
        }
    });

    // === –ö–õ–Ü–ö –ü–û –ü–£–ù–ö–¢–£ –ú–ï–ù–Æ (—É—Å—ñ <a>) ===
    mainNav.querySelectorAll('a').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault(); // –ó—É–ø–∏–Ω—è—î–º–æ –ø–µ—Ä–µ—Ö—ñ–¥
            const href = link.getAttribute('href');

            // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–µ–Ω—é
            closeMenu();

            // –ü–ª–∞–≤–Ω–∏–π —Å–∫—Ä–æ–ª –¥–æ —Å–µ–∫—Ü—ñ—ó (—è–∫—â–æ —Ü–µ —è–∫—ñ—Ä)
            if (href && href.startsWith('#') && href !== '#') {
                const target = document.querySelector(href);
                if (target) {
                    setTimeout(() => {
                        window.scrollTo({
                            top: target.offsetTop - 80, // –í—ñ–¥—Å—Ç—É–ø –ø—ñ–¥ —Ö–µ–¥–µ—Ä
                            behavior: 'smooth'
                        });
                    }, 300); // –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –º–µ–Ω—é –∑–∞–∫—Ä–∏—î—Ç—å—Å—è
                }
            }
        });
    });

    // === –ö–õ–Ü–ö –ü–û–ó–ê –ú–ï–ù–Æ ===
    function closeMenuOnOutsideClick(e) {
        if (!mainNav.contains(e.target) && e.target !== navToggle) {
            closeMenu();
        }
    }

    // === –î–û–î–ê–Ñ–ú–û –û–ë–†–û–ë–ù–ò–ö –ü–Ü–°–õ–Ø –í–Ü–î–ö–†–ò–¢–¢–Ø (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ) ===
    // –Ø–∫—â–æ –ø—É–Ω–∫—Ç–∏ –º–µ–Ω—é –¥–æ–¥–∞—é—Ç—å—Å—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ ‚Äî —Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ
}
// =========================================================================
// üí• –ù–û–í–ê –°–ï–ö–¶–Ü–Ø: –õ–û–ì–Ü–ö–ê WOW INTRO –ê–ù–Ü–ú–ê–¶–Ü–á üí•
// –ö–µ—Ä—É—î –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–º –∑–∞–ø—É—Å–∫–æ–º –∞–Ω—ñ–º–∞—Ü—ñ—ó –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –ø—ñ—Å–ª—è –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è –ª–æ–≥–æ—Ç–∏–ø—É.
// --- –õ–û–ì–Ü–ö–ê WOW INTRO –ê–ù–Ü–ú–ê–¶–Ü–á (–§–Ü–ù–ê–õ–¨–ù–ò–ô –û–ü–¢–ò–ú–ê–õ–¨–ù–ò–ô –ë–ê–õ–ê–ù–°) ---
const logoIntro = document.querySelector('.hero-logo-intro');
const heroTitle = document.querySelector('.hero-title');
const heroSubtitle = document.querySelector('.hero-subtitle');

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –ø—ñ—Å–ª—è 1.5 —Å–µ–∫—É–Ω–¥–∏ (–∫–æ–ª–∏ –¥—Ä—É–∫ –ª–æ–≥–æ—Ç–∏–ø—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ —ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ—á–∏–Ω–∞—î –∑–Ω–∏–∫–∞—Ç–∏).
setTimeout(() => {
    // 1. –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ì–æ–ª–æ–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–π–æ–≥–æ —Ñ–∞–∫—Ç–∏—á–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞: 1.8—Å)
    if (heroTitle) {
        heroTitle.classList.add('animate-in'); 
    }

    // 2. –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞ (–π–æ–≥–æ —Ñ–∞–∫—Ç–∏—á–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞: 2.4—Å)
    if (heroSubtitle) {
        heroSubtitle.classList.add('animate-in');
    }
}, 1500); // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ 1500 –º—Å (1.5 —Å–µ–∫—É–Ω–¥–∏)
// -------------------------------------------------------------------
// -------------------------------------------------------------------

console.log("Ticket 2 Love: –ü—Ä–æ–µ–∫—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.");

// === –§–£–ù–ö–¶–Ü–Ø –û–ù–û–í–õ–ï–ù–ù–Ø –õ–Ü–ß–ò–õ–¨–ù–ò–ö–ê –û–ë–†–ê–ù–ò–• ===
// –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª—é—î —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ "–û–±—Ä–∞–Ω—ñ" —Ç–∞ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–∞—è–≤–∫–∏".
// –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª—é—î —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ "–û–±—Ä–∞–Ω—ñ" —Ç–∞ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–∞—è–≤–∫–∏".
const updateFavoritesCounter = () => {
    let favorites = [];
    try {
        const data = localStorage.getItem('favorites');
        favorites = data ? JSON.parse(data) : [];
    } catch (e) {
        console.warn('localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π:', e);
        favorites = [];
    }
    
    const count = favorites.length;
    const favoritesButtons = document.querySelectorAll('.favorites-button');
    
    favoritesButtons.forEach(button => {
        button.textContent = `–û–±—Ä–∞–Ω—ñ (${count})`;
    });
    
           const selectCountSpan = document.getElementById('select-count');
        if (selectCountSpan) {
            selectCountSpan.textContent = `(${count}/3)`;
            const proceedButton = document.getElementById('proceed-to-application');
            if (proceedButton) {
                if (count > 0) {
                    proceedButton.classList.remove('disabled');
                    proceedButton.removeAttribute('disabled');
                } else {
                    proceedButton.classList.add('disabled');
                    proceedButton.setAttribute('disabled', 'true');
                }
            }
        }
    }
});

// =========================================================================
// 3. –õ–û–ì–Ü–ö–ê –ö–ê–¢–ê–õ–û–ì–£ (catalogue.html: –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø, –ü–ê–ì–Ü–ù–ê–¶–Ü–Ø, HOVER)
// =========================================================================
// =========================================================================
// 3. –õ–û–ì–Ü–ö–ê –ö–ê–¢–ê–õ–û–ì–£ (catalogue.html: –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø, –ü–ê–ì–Ü–ù–ê–¶–Ü–Ø, HOVER)
// =========================================================================
// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–∫—É
const updateAgeValue = (value) => {
    const ageValueEl = document.getElementById('age-value');
    if (ageValueEl) ageValueEl.textContent = `18‚Äì${value}`;
};

// –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ–∫
const renderCatalog = () => {
    const grid = document.getElementById('profile-grid');
    if (!grid) return;

    const start = (currentPage - 1) * PROFILES_PER_PAGE;
    const end = start + PROFILES_PER_PAGE;
    const pageProfiles = filteredProfiles.slice(start, end);

    grid.innerHTML = pageProfiles.map(p => {
        let favorites = [];
        try {
            const data = localStorage.getItem('favorites');
            favorites = data ? JSON.parse(data) : [];
        } catch (e) {
            console.warn('localStorage error:', e);
        }
        const isFavorite = favorites.includes(p.id.toString());
        const favoriteClass = isFavorite ? 'is-favorite' : '';

        return `
            <div class="profile-card" data-id="${p.id}">
                <div class="card-header-wrapper">
                    <img src="assets/img/${p.img}" alt="${p.name}" class="profile-photo" loading="lazy">
                    <button class="favorite-toggle ${favoriteClass}" data-id="${p.id}">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                        </svg>
                    </button>
                </div>
                <div class="card-content">
                    <h2 class="profile-name">${p.name}, ${p.age}</h2>
                    <p class="profile-city">${p.city}</p>
                    <p class="profile-description">${p.description}</p>
                    <a href="profile.html?id=${p.id}" class="view-profile-btn cta-her">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏</a>
                </div>
            </div>
        `;
    }).join('');

    renderPagination();
    attachFavoriteHandlers();
};

// –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
const renderPagination = () => {
    const totalPages = Math.ceil(filteredProfiles.length / PROFILES_PER_PAGE);
    const pagination = document.getElementById('pagination');
    if (!pagination) return;

    pagination.innerHTML = '';
    for (let i = 1; i <= totalPages; i++) {
        const btn = document.createElement('button');
        btn.className = 'page-btn';
        btn.textContent = i;
        if (i === currentPage) btn.classList.add('active');
        btn.onclick = () => {
            currentPage = i;
            renderCatalog();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        };
        pagination.appendChild(btn);
    }
};

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–û–±—Ä–∞—Ç–∏"
const attachFavoriteHandlers = () => {
    document.querySelectorAll('.favorite-toggle').forEach(button => {
        button.onclick = (e) => {
            e.preventDefault();
            const id = e.currentTarget.dataset.id;

            let favorites = [];
            try {
                const data = localStorage.getItem('favorites');
                favorites = data ? JSON.parse(data) : [];
            } catch (err) {
                console.warn('localStorage error:', err);
            }

            if (favorites.includes(id)) {
                favorites = favorites.filter(f => f !== id);
                e.currentTarget.classList.remove('is-favorite');
            } else if (favorites.length < 3) {
                favorites.push(id);
                e.currentTarget.classList.add('is-favorite');
            } else {
                alert('–õ—ñ–º—ñ—Ç 3 –ø—Ä–æ—Ñ—ñ–ª—ñ. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∑–∞—è–≤–∫–∏.');
            }

            try {
                localStorage.setItem('favorites', JSON.stringify(favorites));
            } catch (err) {
                console.warn('Save error:', err);
            }

            updateFavoritesCounter();
        };
    });
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ç–∞–ª–æ–≥—É
if (document.getElementById('profile-grid')) {
    const urlParams = new URLSearchParams(window.location.search);
    currentGender = urlParams.get('gender') || '';

    // –§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—Ç—é (–∑ –≥–æ–ª–æ–≤–Ω–æ—ó)
    if (currentGender) {
        filteredProfiles = profiles.filter(p => p.gender === currentGender);
    }

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const titleEl = document.getElementById('catalogue-title');
    if (titleEl) {
        if (currentGender === 'men') {
            titleEl.textContent = '–ö–∞—Ç–∞–ª–æ–≥ –ß–æ–ª–æ–≤—ñ—á–∏—Ö –ü—Ä–æ—Ñ—ñ–ª—ñ–≤ ü§µ';
        } else if (currentGender === 'women') {
            titleEl.textContent = '–ö–∞—Ç–∞–ª–æ–≥ –ñ—ñ–Ω–æ—á–∏—Ö –ü—Ä–æ—Ñ—ñ–ª—ñ–≤ üåπ';
        } else {
            titleEl.textContent = '–ö–∞—Ç–∞–ª–æ–≥ –ü—Ä–æ—Ñ—ñ–ª—ñ–≤';
        }
    }

    // –§—ñ–ª—å—Ç—Ä –ø–æ –≤—ñ–∫—É
    const ageSlider = document.getElementById('age-range');
    if (ageSlider) {
        ageSlider.addEventListener('input', () => {
            const maxAge = ageSlider.value;
            updateAgeValue(maxAge);
            filteredProfiles = profiles.filter(p => 
                p.age <= maxAge && (!currentGender || p.gender === currentGender)
            );
            currentPage = 1;
            renderCatalog();
        });
        updateAgeValue(ageSlider.value);
    }

    renderCatalog();
}
    // =========================================================================
    // 4. –õ–û–ì–Ü–ö–ê –°–¢–û–†–Ü–ù–ö–ò –î–ï–¢–ê–õ–¨–ù–û–ì–û –ü–†–û–§–Ü–õ–Æ (profile.html)
    // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥–µ—Ç–∞–ª—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞ ID –∑ URL.
    // =========================================================================
    
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞ ID
    const getProfileData = (id) => {
        return profiles.find(p => p.id.toString() === id);
    };

    const profileDetailSection = document.getElementById('profile-detail');
    if (profileDetailSection) {
        const urlParams = new URLSearchParams(window.location.search);
        const profileId = urlParams.get('id'); 
        const profile = getProfileData(profileId);
        
        if (profile) {
            const profileNameDetail = document.querySelector('.profile-name-detail');
            const profileCityDetail = document.querySelector('.profile-city-detail');
            const mainProfilePhoto = document.querySelector('.main-profile-photo');
            const selectProfileBtn = document.getElementById('select-profile-btn');

            if (profileNameDetail) profileNameDetail.textContent = `${profile.name}, ${profile.age}`;
            if (profileCityDetail) profileCityDetail.textContent = profile.city;
            if (mainProfilePhoto) mainProfilePhoto.src = `assets/img/${profile.img}`;

            if (selectProfileBtn) {
                const favorites = JSON.parse(localStorage.getItem('favorites')) || [];
                const isFavorite = favorites.includes(profileId);
                
                selectProfileBtn.textContent = isFavorite ? `–í–∏–±—Ä–∞–Ω–æ ‚úÖ` : `–û–±—Ä–∞—Ç–∏ ${profile.name}`;
                if (isFavorite) selectProfileBtn.classList.add('is-favorite');
                
                selectProfileBtn.addEventListener('click', () => {
                    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];
                    
                    if (!favorites.includes(profileId)) {
                        if (favorites.length < 3) {
                            favorites.push(profileId);
                            localStorage.setItem('favorites', JSON.stringify(favorites));
                            updateFavoritesCounter();
                            
                            selectProfileBtn.textContent = `–í–∏–±—Ä–∞–Ω–æ ‚úÖ`;
                            selectProfileBtn.classList.add('is-favorite');
                            alert(`${profile.name} –¥–æ–¥–∞–Ω–æ –¥–æ –í–∞—à–∏—Ö –æ–±—Ä–∞–Ω–∏—Ö! ‚úÖ`);
                        } else {
                            alert('–í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É (3 –ø—Ä–æ—Ñ—ñ–ª—ñ). –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏.');
                        }
                    } else {
                        alert(`${profile.name} –≤–∂–µ —É –í–∞—à–∏—Ö –æ–±—Ä–∞–Ω–∏—Ö.`);
                    }
                });
            }

        } else {
             if (profileDetailSection) {
                 profileDetailSection.innerHTML = '<p class="error-message">–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p>';
             }
        }
    }


    // =========================================================================
    // 5. –õ–û–ì–Ü–ö–ê –ú–û–î–ê–õ–¨–ù–û–ì–û –í–Ü–ö–ù–ê (–§–Ü–õ–¨–¢–†–ò) 
    // –ö–µ—Ä—É—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ—î—é –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.
    // =========================================================================
    const openFiltersBtn = document.getElementById('open-filters');
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    
    // –í–º—ñ—Å—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    modalOverlay.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>–§—ñ–ª—å—Ç—Ä–∏ –ü—Ä–æ—Ñ—ñ–ª—ñ–≤</h3>
                <button class="close-btn">&times;</button>
            </div>
            <form id="filter-form">
                <div class="filter-group">
                    <label for="age-range">–í—ñ–∫ (20 - 45)</label>
                    <input type="range" id="age-range" min="18" max="55" value="30">
                    <span id="age-value" style="font-family: var(--font-sans);">30 —Ä–æ–∫—ñ–≤</span>
                </div>
                <div class="filter-group">
                    <label for="height-range">–ó—Ä—ñ—Å—Ç (160 - 190 —Å–º)</label>
                    <input type="range" id="height-range" min="150" max="210" value="175">
                    <span id="height-value" style="font-family: var(--font-sans);">175 —Å–º</span>
                </div>
                <button type="submit" class="cta-button cta-her" style="width: 100%; margin-top: 15px;">–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –§—ñ–ª—å—Ç—Ä–∏</button>
            </form>
        </div>
    `;

    if (document.getElementById('open-filters')) {
        document.body.appendChild(modalOverlay);
    }
    

    const closeBtn = modalOverlay.querySelector('.close-btn');
    const ageRange = document.getElementById('age-range');
    const ageValue = document.getElementById('age-value');
    const heightRange = document.getElementById('height-range');
    const heightValue = document.getElementById('height-value');

    if (openFiltersBtn) {
        openFiltersBtn.addEventListener('click', () => {
            modalOverlay.classList.add('is-open');
        });
    }

    const closeModal = () => {
        modalOverlay.classList.remove('is-open');
    };
    
    if (closeBtn) {
        closeBtn.addEventListener('click', closeModal);
    }
    if (modalOverlay) {
        modalOverlay.addEventListener('click', (e) => {
            if (e.target === modalOverlay) {
                closeModal(); 
            }
        });
    }

    if (ageRange && heightRange) {
        ageRange.addEventListener('input', () => {
            ageValue.textContent = `${ageRange.value} —Ä–æ–∫—ñ–≤`;
        });
        heightRange.addEventListener('input', () => {
           heightValue.textContent = `${heightRange.value} —Å–º`;
¬† });
¬† ¬† }






















